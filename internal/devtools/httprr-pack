#!/usr/bin/env bash

# httprr-pack: Tool for managing httprr file compression in the repository
# Usage: httprr-pack [pack|unpack|check|clean]

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

log_success() {
    echo -e "${GREEN}SUCCESS:${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}WARNING:${NC} $1"
}

log_error() {
    echo -e "${RED}ERROR:${NC} $1"
}

# Find all httprr files in the repository
find_httprr_files() {
    find "$REPO_ROOT" -type f \( -name "*.httprr" -o -name "*.httprr.gz" \) | grep -v "/internal/devtools/httprr-convert/"
}

# Count files by type
count_files() {
    local uncompressed=$(find "$REPO_ROOT" -type f -name "*.httprr" | grep -v "/internal/devtools/httprr-convert/" | wc -l)
    local compressed=$(find "$REPO_ROOT" -type f -name "*.httprr.gz" | grep -v "/internal/devtools/httprr-convert/" | wc -l)
    echo "Found $uncompressed uncompressed and $compressed compressed httprr files"
}

# Pack all httprr files to compressed format
pack_files() {
    log_info "Packing httprr files to compressed format..."
    count_files
    
    local total=0
    local converted=0
    
    while IFS= read -r -d '' file; do
        if [[ "$file" == *.httprr && "$file" != *.httprr.gz ]]; then
            total=$((total + 1))
            log_info "Compressing: $file"
            if cd "$REPO_ROOT" && go run ./internal/devtools/httprr-convert -compress -dir "$(dirname "$file")" 2>/dev/null; then
                converted=$((converted + 1))
            else
                log_error "Failed to compress: $file"
            fi
        fi
    done < <(find "$REPO_ROOT" -type f -name "*.httprr" -print0 | grep -zv "/internal/devtools/httprr-convert/")
    
    if [[ $total -eq 0 ]]; then
        log_success "All httprr files are already compressed"
    else
        log_success "Compressed $converted/$total httprr files"
    fi
    
    count_files
}

# Unpack all httprr files to uncompressed format
unpack_files() {
    log_info "Unpacking httprr files to uncompressed format..."
    count_files
    
    local total=0
    local converted=0
    
    while IFS= read -r -d '' file; do
        if [[ "$file" == *.httprr.gz ]]; then
            total=$((total + 1))
            log_info "Decompressing: $file"
            if cd "$REPO_ROOT" && go run ./internal/devtools/httprr-convert -decompress -dir "$(dirname "$file")" 2>/dev/null; then
                converted=$((converted + 1))
            else
                log_error "Failed to decompress: $file"
            fi
        fi
    done < <(find "$REPO_ROOT" -type f -name "*.httprr.gz" -print0 | grep -zv "/internal/devtools/httprr-convert/")
    
    if [[ $total -eq 0 ]]; then
        log_success "All httprr files are already uncompressed"
    else
        log_success "Decompressed $converted/$total httprr files"
    fi
    
    count_files
}

# Check compression status and report issues
check_files() {
    log_info "Checking httprr file compression status..."
    count_files
    
    local uncompressed_files=()
    while IFS= read -r -d '' file; do
        if [[ "$file" == *.httprr && "$file" != *.httprr.gz ]]; then
            uncompressed_files+=("$file")
        fi
    done < <(find "$REPO_ROOT" -type f -name "*.httprr" -print0 | grep -zv "/internal/devtools/httprr-convert/")
    
    if [[ ${#uncompressed_files[@]} -eq 0 ]]; then
        log_success "All httprr files are properly compressed"
        return 0
    else
        log_warning "Found ${#uncompressed_files[@]} uncompressed httprr files:"
        for file in "${uncompressed_files[@]}"; do
            echo "  - ${file#$REPO_ROOT/}"
        done
        return 1
    fi
}

# Clean up any orphaned files (both .httprr and .httprr.gz for same test)
clean_files() {
    log_info "Cleaning up orphaned httprr files..."
    
    local cleaned=0
    local testdata_dirs=$(find "$REPO_ROOT" -type d -name "testdata" | grep -v "/internal/devtools/httprr-convert/")
    
    for dir in $testdata_dirs; do
        # Find pairs of files with same base name
        while IFS= read -r base; do
            local uncompressed="$dir/$base.httprr"
            local compressed="$dir/$base.httprr.gz"
            
            if [[ -f "$uncompressed" && -f "$compressed" ]]; then
                log_warning "Found duplicate files: $base.httprr and $base.httprr.gz"
                # Keep the more recent one
                if [[ "$compressed" -nt "$uncompressed" ]]; then
                    log_info "Removing older uncompressed file: $uncompressed"
                    rm "$uncompressed"
                else
                    log_info "Removing older compressed file: $compressed"
                    rm "$compressed"
                fi
                cleaned=$((cleaned + 1))
            fi
        done < <(find "$dir" -name "*.httprr*" -exec basename {} \; | sed 's/\.httprr\.gz$//' | sed 's/\.httprr$//' | sort -u)
    done
    
    if [[ $cleaned -eq 0 ]]; then
        log_success "No orphaned files found"
    else
        log_success "Cleaned up $cleaned orphaned file pairs"
    fi
}

# Show usage information
show_usage() {
    cat << EOF
Usage: $(basename "$0") [command]

Commands:
    pack      Compress all .httprr files to .httprr.gz format
    unpack    Decompress all .httprr.gz files to .httprr format
    check     Check compression status (exit 1 if uncompressed files found)
    clean     Remove duplicate files when both compressed/uncompressed exist
    help      Show this help message

Examples:
    # Compress all httprr files for commit
    $(basename "$0") pack
    
    # Decompress for debugging/editing
    $(basename "$0") unpack
    
    # Check if all files are compressed (for CI/linting)
    $(basename "$0") check

EOF
}

# Main command dispatch
main() {
    case "${1:-help}" in
        pack)
            pack_files
            ;;
        unpack)
            unpack_files
            ;;
        check)
            check_files
            ;;
        clean)
            clean_files
            ;;
        help|--help|-h)
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"